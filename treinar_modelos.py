# -*- coding: utf-8 -*-
"""treinar_modelos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1an09nia2FdVa-Ac7YboCix_NUcopGblf
"""

# treinar_modelos.py

import pandas as pd
import statsmodels.api as sm
import numpy as np
import pickle
import os

def treinar_e_salvar_modelos():
    """
    Lê o arquivo de vendas, treina um modelo para cada loja e salva-os em disco.
    """
    arquivo_csv = 'vendas.csv'
    pasta_modelos = 'modelos_salvos'

    # Cria a pasta para salvar os modelos, se não existir
    if not os.path.exists(pasta_modelos):
        os.makedirs(pasta_modelos)

    print("A carregar dados de vendas...")
    df = pd.read_csv(arquivo_csv, delimiter=';')
    df['DATA'] = pd.to_datetime(df['ANO'].astype(str) + '-' + df['MES'].astype(str) + '-01')
    df = df.set_index('DATA')

    lojas_unicas = df['LOJNUMERO'].unique()
    print(f"Encontradas {len(lojas_unicas)} lojas únicas. A iniciar treino...")

    for loja_id in lojas_unicas:
        print(f"  A treinar modelos para a Loja {loja_id}...")
        df_loja = df[df['LOJNUMERO'] == loja_id].copy().sort_index()

        # Usar todos os dados disponíveis para o treino
        if len(df_loja) < 12:
            print(f"    AVISO: Loja {loja_id} tem poucos dados e será ignorada.")
            continue

        # Lógica de transformação e treino
        df_loja['QUANTIDADE_LOG'] = np.log1p(df_loja['QUANTIDADE'])
        df_loja['SOMA_LOG'] = np.log1p(df_loja['SOMA'])

        try:
            # Modelo de Quantidade
            modelo_qtd = sm.tsa.SARIMAX(df_loja['QUANTIDADE_LOG'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)).fit(disp=False)
            with open(f'{pasta_modelos}/modelo_loja_{loja_id}_qtd.pkl', 'wb') as pkl:
                pickle.dump(modelo_qtd, pkl)

            # Modelo de Soma (Valor)
            modelo_soma = sm.tsa.SARIMAX(df_loja['SOMA_LOG'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)).fit(disp=False)
            with open(f'{pasta_modelos}/modelo_loja_{loja_id}_soma.pkl', 'wb') as pkl:
                pickle.dump(modelo_soma, pkl)

            print(f"    Modelos para a Loja {loja_id} treinados e salvos com sucesso.")

        except Exception as e:
            print(f"    ERRO ao treinar para a Loja {loja_id}: {e}")

    print("\nProcesso de treino concluído!")

if __name__ == '__main__':
    treinar_e_salvar_modelos()