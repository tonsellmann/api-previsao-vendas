# -*- coding: utf-8 -*-
"""previsor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sgTA0spowr93d7OoT_wqHnQG2xM1HCDP
"""

# previsor.py

import pandas as pd
import statsmodels.api as sm
import numpy as np
import os


try:
    arquivo_csv = 'vendas.csv'
    print("Carregando arquivo de dados 'vendas.csv' para a memória...")
    df_global = pd.read_csv(arquivo_csv, delimiter=';')
    df_global['DATA'] = pd.to_datetime(df_global['ANO'].astype(str) + '-' + df_global['MES'].astype(str) + '-01')
    df_global = df_global.set_index('DATA')
    print("Arquivo de dados carregado com sucesso.")
except FileNotFoundError:
    print(f"ERRO CRÍTICO: Arquivo '{arquivo_csv}' não encontrado no momento da inicialização.")
    df_global = None

def analisar_e_prever_vendas(loja_desejada, mes_desejado, ano_desejado):
    """
    Função-núcleo que agora USA os dados já carregados na memória.
    """
    if df_global is None:
        return {"erro": f"Os dados de vendas não puderam ser carregados. Verifique se 'vendas.csv' existe."}

    df_loja = df_global[df_global['LOJNUMERO'] == loja_desejada].copy().sort_index()

    if df_loja.empty:
        return {"erro": f"Loja {loja_desejada} não encontrada."}

    df_loja_treino = df_loja.iloc[:-1]
    if len(df_loja_treino) < 12:
        return {"erro": "Dados insuficientes para um treinamento confiável."}

    df_loja_treino['QUANTIDADE_LOG'] = np.log1p(df_loja_treino['QUANTIDADE'])
    df_loja_treino['SOMA_LOG'] = np.log1p(df_loja_treino['SOMA'])

    try:
        modelo_quantidade = sm.tsa.SARIMAX(df_loja_treino['QUANTIDADE_LOG'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)).fit(disp=False)
        modelo_soma = sm.tsa.SARIMAX(df_loja_treino['SOMA_LOG'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)).fit(disp=False)
    except Exception as e:
        return {"erro": f"Falha ao treinar o modelo: {e}"}

    data_previsao = pd.to_datetime(f'{ano_desejado}-{mes_desejado}-01')
    pred_qtd_log = modelo_quantidade.get_prediction(start=data_previsao, end=data_previsao)
    pred_soma_log = modelo_soma.get_prediction(start=data_previsao, end=data_previsao)

    valor_previsto_qtd = round(np.expm1(pred_qtd_log.predicted_mean.iloc[0]))
    valor_previsto_soma = round(np.expm1(pred_soma_log.predicted_mean.iloc[0]), 2)

    valor_previsto_qtd = max(0, valor_previsto_qtd)
    valor_previsto_soma = max(0, valor_previsto_soma)

    return {
        "loja_consultada": loja_desejada,
        "previsao_para_data": f"{mes_desejado:02d}/{ano_desejado}",
        "previsao_quantidade": int(valor_previsto_qtd),
        "previsao_valor_vendas": float(valor_previsto_soma),
        "status": "sucesso"
    }
